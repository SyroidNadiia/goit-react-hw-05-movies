{"version":3,"file":"static/js/387.d8bc9527.chunk.js","mappings":"iRAEaA,EAAcC,EAAAA,GAAAA,GAAH,iJASXC,EAAWD,EAAAA,GAAAA,GAAH,+HAQRE,EAAYF,EAAAA,GAAAA,IAAH,iIAQTG,EAAWH,EAAAA,GAAAA,EAAH,4DAKRI,EAAgBJ,EAAAA,GAAAA,EAAH,sC,SCsB1B,EA3Ca,WACX,OAAgCK,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAe,mCAAG,gHAEGC,EAAAA,EAAAA,GAAUJ,GAFb,gBAEZK,EAFY,EAEZA,KACRN,EAAYM,GAHQ,gDAKpBC,QAAQC,IAAR,MALoB,yDAAH,qDAQrBJ,EAAgBH,EACjB,GAAE,CAACA,IAIJ,OACE,SAACT,EAAD,UACGO,EAASU,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aACpC,OACE,UAACnB,EAAD,YACE,SAACC,EAAD,CACEmB,IACED,EAAY,6CAC8BA,GAVnC,oDAaTE,MAAM,KACNC,OAAO,MACPC,IAAKN,KAEP,SAACf,EAAD,UAAWe,KACX,UAACd,EAAD,yBAA2Be,OAZdF,EAelB,KAGN,C,6LClDKQ,EAAW,+BACXC,EAAU,mCAEHC,EAAU,mCAAG,+FAClBC,EADkB,UACTH,EADS,uCAC8BC,GAD9B,SAGDG,EAAAA,EAAAA,IAAUD,GAHT,uBAGhBE,EAHgB,EAGhBA,KAHgB,kBAIjBA,GAJiB,2CAAH,qDAOVC,EAAc,mCAAG,WAAMd,GAAN,kFACtBW,EADsB,UACbH,EADa,kBACKR,EADL,oBACmBS,GADnB,SAGLG,EAAAA,EAAAA,IAAUD,GAHL,uBAGpBE,EAHoB,EAGpBA,KAHoB,kBAIrBA,GAJqB,2CAAH,sDAOdE,EAAY,mCAAG,WAAOC,GAAP,kFACpBL,EADoB,UACXH,EADW,iCACsBC,EADtB,iCACsDO,EADtD,wCAGLJ,EAAAA,EAAAA,IAAUD,GAHL,uBAGnBE,EAHmB,EAGnBA,KAHmB,kBAInBA,GAJmB,2CAAH,sDAOZlB,EAAS,mCAAG,WAAMK,GAAN,kFACjBW,EADiB,UACRH,EADQ,kBACUR,EADV,4BACgCS,GADhC,SAGAG,EAAAA,EAAAA,IAAUD,GAHV,uBAGfE,EAHe,EAGfA,KAHe,kBAIhBA,GAJgB,2CAAH,sDAOTI,EAAY,mCAAG,WAAMjB,GAAN,kFACpBW,EADoB,UACXH,EADW,kBACOR,EADP,4BAC6BS,GAD7B,SAGHG,EAAAA,EAAAA,IAAUD,GAHP,uBAGlBE,EAHkB,EAGlBA,KAHkB,kBAInBA,GAJmB,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","components/api/fetch.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const CastWrapper = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  padding: 0;\n  margin: 0;\n  list-style-type: none;\n`;\n\nexport const CastItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 1rem;\n  width: 12rem;\n`;\n\nexport const CastImage = styled.img`\n  width: 70px;\n  height: 100px;\n  object-fit: cover;\n  border-radius: 50%;\n  margin-bottom: 0.5rem;\n`;\n\nexport const CastName = styled.p`\n  font-weight: bold;\n  margin: 0;\n`;\n\nexport const CastCharacter = styled.p`\n  margin: 0;\n`;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCast } from '../api/fetch';\nimport {\n  CastWrapper,\n  CastItem,\n  CastImage,\n  CastName,\n  CastCharacter,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const [dataCast, setDataCast] = useState([]);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const handelFetchCast = async () => {\n      try {\n        const { cast } = await fetchCast(movieId);\n        setDataCast(cast);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    handelFetchCast(movieId);\n  }, [movieId]);\n\n  const defaultImage = 'https://via.placeholder.com/200x300?text=No+Image';\n\n  return (\n    <CastWrapper>\n      {dataCast.map(({ id, name, character, profile_path }) => {\n        return (\n          <CastItem key={id}>\n            <CastImage\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/original${profile_path}`\n                  : defaultImage\n              }\n              width=\"70\"\n              height=\"100\"\n              alt={name}\n            />\n            <CastName>{name}</CastName>\n            <CastCharacter>Character: {character}</CastCharacter>\n          </CastItem>\n        );\n      })}\n    </CastWrapper>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '5742f4de3a7b600a36c23a592b6dd172';\n\nexport const fetchAsync = async () => {\n  const url = `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`;\n\n  const { data } = await axios.get(url);\n  return data;\n};\n\nexport const fetchMovieById = async id => {\n  const url = `${BASE_URL}/movie/${id}?api_key=${API_KEY}`;\n\n  const { data } = await axios.get(url);\n  return data;\n};\n\nexport const fetchByQuery = async (guery) => {\n  const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${guery}&page=1&include_adult=false`;\n  \n  const {data} = await axios.get(url);\n  return data;\n}\n\nexport const fetchCast = async id => {\n  const url = `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`;\n\n  const { data } = await axios.get(url);\n  return data;\n};\n\nexport const fetchReviews = async id => {\n  const url = `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`;\n\n  const { data } = await axios.get(url);\n  return data;\n};\n"],"names":["CastWrapper","styled","CastItem","CastImage","CastName","CastCharacter","useState","dataCast","setDataCast","movieId","useParams","useEffect","handelFetchCast","fetchCast","cast","console","log","map","id","name","character","profile_path","src","width","height","alt","BASE_URL","API_KEY","fetchAsync","url","axios","data","fetchMovieById","fetchByQuery","guery","fetchReviews"],"sourceRoot":""}